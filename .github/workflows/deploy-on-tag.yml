name: Deploy On Tag

on:
  push:
    branches:
      - 'main'

jobs:
  serverless-deploy:
    if: github.ref == 'refs/heads/main'
    name: Deploy lambda
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: butlerlogic/action-autotag@stable
        id: create-tag
        with:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          strategy: package
          tag_prefix: v
          tag_message: "Version release"

      - name: Show outputs once again
        run: echo "{{ steps.create-tag.outputs.tagcreated }}"

      - name: Checkout repo
        if: ${{ steps.create-tag.outputs.tagcreated == 'yes' }}
        uses: actions/checkout@v2

      - name: Setup node
        if: ${{ steps.create-tag.outputs.tagcreated == 'yes' }}
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Cache node_modules
        if: ${{ steps.create-tag.outputs.tagcreated == 'yes' }}
        id: cache-node-modules
        uses: actions/cache@v1
        env:
          cache-name: node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install dependencies
        if: ${{ steps.create-tag.outputs.tagcreated == 'yes' }}
        run: npm ci

      - name: Install Serverless Framework
        if: ${{ steps.create-tag.outputs.tagcreated == 'yes' }}
        run: npm install -g serverless

      - name: Serverless Framework AWS authentication
        if: ${{ steps.create-tag.outputs.tagcreated == 'yes' }}
        run: sls config credentials --provider aws --key ${{ secrets.AWS_KEY }} --secret ${{ secrets.AWS_SECRET }}

      - name: Create env file
        if: ${{ steps.create-tag.outputs.tagcreated == 'yes' }}
        run: |
          cat > .env << EOF
          ${{ secrets.ENV }}
          EOF

      - name: Install NPM Dependencies
        if: ${{ steps.create-tag.outputs.tagcreated == 'yes' }}
        run: npm install

      - name: Deploy Lambda Functions
        if: ${{ steps.create-tag.outputs.tagcreated == 'yes' }}
        run: sls deploy -s staging
